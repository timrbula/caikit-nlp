[
    {
        "predicted_target": "needed libraries to use UNIX and YAMLEnJAR canister commands for them",
        "source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create",
        "target": "  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n",
        "verbalized_source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create"
    },
    {
        "predicted_target": "ansible.builtin.wait_for:\n    timeout: 30\n  ret",
        "source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create",
        "target": "  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n",
        "verbalized_source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create"
    },
    {
        "predicted_target": "k8s:\n    api_version: ui-installer-registry",
        "source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster",
        "target": "  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n",
        "verbalized_source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster"
    },
    {
        "predicted_target": "ansible.builtin.fail:\n    msg: \"Cluster level 1:",
        "source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n\n- name: Wait for Worker Nodes to Join",
        "target": "  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 300\n  delay: 10\n",
        "verbalized_source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n\n- name: Wait for Worker Nodes to Join"
    },
    {
        "predicted_target": "k8s_timestamp:\n  changed: true\n  async: 1",
        "source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n\n- name: Wait for Worker Nodes to Join\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 300\n  delay: 10\n\n- name: Wait for Worker nodes to be Ready",
        "target": "  shell: oc get no --kubeconfig=/root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig  --no-headers | grep -i 'NotReady' | wc -l\n  register: node_status\n  until: node_status.stdout == '0'\n  retries: 50\n  delay: 15",
        "verbalized_source": "---\n- name: Wait for agents to join the cluster\n  k8s_info:\n    api_version: agent-install.openshift.io/v1beta1\n    kind: Agent\n  register: agents\n  until: agents.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Get agent names\n  command: oc get agents -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} --no-headers\n  register: agents_info\n\n- name: Create List for agents\n  set_fact:\n    agents: []\n- name: Get a List of agents\n  set_fact:\n    agents: \"{{ agents + [agents_info.stdout.split('\\n')[item].split(' ')[0]] }}\"\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Patch Agents\n  shell: oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }}  patch agent {{ agents[item] }} -p '{\"spec\":{\"installation_disk_id\":\"/dev/vda\",\"approved\":true,\"hostname\":\"worker-{{item}}.{{\n    hypershift.hcp.hosted_cluster_name }}.{{ hypershift.hcp.basedomain }}\"}}' --type merge\n  loop: \"{{ range(hypershift.agents_parms.agents_count|int) | list }}\"\n\n- name: Scale Nodepool\n  command: oc -n {{ hypershift.hcp.clusters_namespace }} scale nodepool {{ hypershift.hcp.hosted_cluster_name }} --replicas {{ hypershift.agents_parms.agents_count\n    }}\n\n- name: Wait for Agentmachines to create\n  k8s_info:\n    api_version: capi-provider.agent-install.openshift.io/v1alpha1\n    kind: AgentMachine\n  register: agent_machines\n  until: agent_machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Wait for Machines to create\n  k8s_info:\n    api_version: cluster.x-k8s.io/v1beta1\n    kind: Machine\n  register: machines\n  until: machines.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 30\n  delay: 10\n\n- name: Create Kubeconfig for Hosted Cluster\n  shell: hypershift create kubeconfig --namespace {{ hypershift.hcp.clusters_namespace }} --name {{ hypershift.hcp.hosted_cluster_name }} > /root/ansible_workdir/{{\n    hypershift.hcp.hosted_cluster_name }}-kubeconfig\n\n- name: Wait for Worker Nodes to Join\n  k8s_info:\n    api_version: v1\n    kind: Node\n    kubeconfig: /root/ansible_workdir/{{ hypershift.hcp.hosted_cluster_name }}-kubeconfig\n  register: nodes\n  until: nodes.resources | length == {{ hypershift.agents_parms.agents_count }}\n  retries: 300\n  delay: 10\n\n- name: Wait for Worker nodes to be Ready"
    },
    {
        "predicted_target": "ansible.builtin.service:\n    name: \"{{ firewalld_",
        "source": "---\n- name: start firewalld service",
        "target": "  service:\n    name: firewalld\n    state: started\n    enabled: true\n",
        "verbalized_source": "---\n- name: start firewalld service"
    },
    {
        "predicted_target": "services\n  ansible.builtin.firewalld:\n    service: \"{{ item",
        "source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall",
        "target": "  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n",
        "verbalized_source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall"
    },
    {
        "predicted_target": "services\n  ansible.posix.firewalld:\n    service: \"{{ item",
        "source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https",
        "target": "  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n",
        "verbalized_source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https"
    },
    {
        "predicted_target": "ansible.builtin.shell:\n    verifypolicyupdate: false",
        "source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080",
        "target": "  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n",
        "verbalized_source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080"
    },
    {
        "predicted_target": "tags: set_firewall\n  replace:\n    path: /etc/http",
        "source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n\n- name: Ensure the SSL default port is 4443",
        "target": "  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf.d/ssl.conf\n    regexp: ^Listen 443 https\n    replace: Listen 4443 https\n    backup: true\n",
        "verbalized_source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n\n- name: Ensure the SSL default port is 4443"
    },
    {
        "predicted_target": "port definitions for https\n  ansible.builtin.systemd:\n    name: fire",
        "source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n\n- name: Ensure the SSL default port is 4443\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf.d/ssl.conf\n    regexp: ^Listen 443 https\n    replace: Listen 4443 https\n    backup: true\n\n- name: reload firewalld to reflect changes",
        "target": "  tags: set_firewall\n  systemd:\n    name: firewalld\n    state: reloaded",
        "verbalized_source": "---\n- name: start firewalld service\n  service:\n    name: firewalld\n    state: started\n    enabled: true\n\n- name: Add ports to firewall\n  tags: set_firewall\n  firewalld:\n    port: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - 8080/tcp\n    - 80/tcp\n    - 443/tcp\n    - 4443/tcp\n    - 6443/tcp\n    - 22623/tcp\n    - 53/tcp\n    - 53/udp\n\n- name: Permit traffic in default zone for http and https\n  tags: set_firewall\n  ansible.posix.firewalld:\n    service: \"{{ item }}\"\n    permanent: true\n    state: enabled\n  loop:\n    - http\n    - https\n\n- name: Ensure the default Apache port is 8080\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: ^Listen 80$\n    replace: Listen 8080\n    backup: true\n\n- name: Ensure the SSL default port is 4443\n  tags: set_firewall\n  replace:\n    path: /etc/httpd/conf.d/ssl.conf\n    regexp: ^Listen 443 https\n    replace: Listen 4443 https\n    backup: true\n\n- name: reload firewalld to reflect changes"
    },
    {
        "predicted_target": "or gettyownorepsownoworepservice\n  ansible.builtin.",
        "source": "---\n- name: Find inventory directory from ansible.cfg",
        "target": "  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg"
    },
    {
        "predicted_target": "name on the remote host\n  local_action: find_path {{ artifact_on_remote",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.",
        "target": "  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project."
    },
    {
        "predicted_target": "ansible.builtin.fail:\n    msg: Both specify both 'no_",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.",
        "target": "  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined."
    },
    {
        "predicted_target": ".\n  tags: set_inventory\n  become: false\n  args:",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information",
        "target": "  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information"
    },
    {
        "predicted_target": "for jumphost.\n  path_to_script:\n  script: \"{{ path",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg",
        "target": "  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg"
    },
    {
        "predicted_target": "results\n  tags: set_inventory\n  check_mode: true\n  verify_",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup",
        "target": "  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup"
    },
    {
        "predicted_target": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc!= 0\n\n- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  gather_facts: false\n  register: inventory",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n\n- name: Gather facts to re-read inventory after changes made to inventory",
        "target": "  tags: set_inventory\n  ansible.builtin.gather_facts:",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n\n- name: Gather facts to re-read inventory after changes made to inventory"
    },
    {
        "predicted_target": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc!= 0\n\n- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  ansible.builtin.gather_facts:\n- name: Refresh inventory after changes are triggered\n  tags: set_inventory\n  meta: refresh_inventory",
        "source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n\n- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  ansible.builtin.gather_facts:\n- name: Refresh inventory",
        "target": "  tags: set_inventory\n  meta: refresh_inventory",
        "verbalized_source": "---\n- name: Find inventory directory from ansible.cfg\n  tags: set_inventory\n  shell: cat {{ ansible_config_file }} | grep 'inventory=' | cut -f2 -d\"=\"\n  register: find_inventory\n\n- name: Find absolute path to project.\n  tags: set_inventory\n  shell: |\n    ansible_config=\"{{ ansible_config_file }}\"\n    echo \"${ansible_config%/*}/\"\n  register: find_project\n\n- name: Fail if network_mode is NAT and jumphost vars are undefined.\n  tags: set_inventory\n  fail:\n    msg: \"Error jumphost vars undefined: when env.network_mode is NAT, you must set all env.jumphost variables.\"\n  when: ( env.network_mode | upper == 'NAT' ) and (env.jumphost.name is none or env.jumphost.ip is none or env.jumphost.user is none or env.jumphost.pass is none\n    or env.jumphost.path_to_keypair is none)\n\n- name: Template out inventory with localhost, file server, KVM host, jumphost(optional) and bastion information\n  tags: set_inventory\n  template:\n    src: hosts.j2\n    dest: \"{{ find_project.stdout }}{{ find_inventory.stdout }}/hosts\"\n    force: true\n\n- meta: refresh_inventory\n\n- name: Add path to Ansible private key in ansible.cfg\n  tags: set_inventory\n  lineinfile:\n    line: private_key_file=~/.ssh/{{ env.ansible_key_name }}\n    path: \"{{ ansible_config_file }}\"\n    regexp: private_key_file\n    state: present\n\n- name: check inventory setup\n  tags: set_inventory\n  command: ansible-inventory --list\n  register: inv_check\n  failed_when: inv_check.rc != 0\n\n- name: Gather facts to re-read inventory after changes made to inventory\n  tags: set_inventory\n  ansible.builtin.gather_facts:\n- name: Refresh inventory"
    },
    {
        "predicted_target": "zip file to remote location\n  ansible.builtin.get_url:\n    url",
        "source": "---\n- name: Download ipxe script",
        "target": "  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n",
        "verbalized_source": "---\n- name: Download ipxe script"
    },
    {
        "predicted_target": "ansible.builtin.file:\n    path: \"{{ ansible_env",
        "source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory",
        "target": "  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n",
        "verbalized_source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory"
    },
    {
        "predicted_target": "in official RHELrepo\n  ansible.builtin.uri:\n    url:",
        "source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd",
        "target": "  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n",
        "verbalized_source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd"
    },
    {
        "predicted_target": "for bootable hosted-cleanup image\n  ansible.builtin.uri:",
        "source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img",
        "target": "  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n",
        "verbalized_source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img"
    },
    {
        "predicted_target": "get_url:\n    url: \"{{ overridden_url }}\"",
        "source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n\n- name: Get URL for kernel.img",
        "target": "  set_fact:\n    kernel_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[1] }}\"\n",
        "verbalized_source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n\n- name: Get URL for kernel.img"
    },
    {
        "predicted_target": "get_url:\n    url: \"{{ kernel_url }}\"\n    dest",
        "source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n\n- name: Get URL for kernel.img\n  set_fact:\n    kernel_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[1] }}\"\n\n- name: Download kernel.img",
        "target": "  get_url:\n    url: \"{{ kernel_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/kernel.img\n    validate_certs: false",
        "verbalized_source": "---\n- name: Download ipxe script\n  shell: curl -k -L $(oc -n {{ hypershift.hcp.clusters_namespace }}-{{ hypershift.hcp.hosted_cluster_name }} get InfraEnv {{ hypershift.hcp.hosted_cluster_name }}\n    -ojsonpath=\"{.status.bootArtifacts.ipxeScript}\")\n  register: ipxe_script\n\n- name: Create Installation directory\n  file:\n    path: /var/lib/libvirt/images/pxeboot\n    state: directory\n    mode: \"0755\"\n\n- name: Get URL for initrd\n  set_fact:\n    initrd_url: \"{{ ipxe_script.stdout_lines[1].split(' ')[3] }}\"\n\n- name: Download initrd.img\n  get_url:\n    url: \"{{ initrd_url }}\"\n    dest: /var/lib/libvirt/images/pxeboot/initrd.img\n    validate_certs: false\n\n- name: Get URL for kernel.img\n  set_fact:\n    kernel_url: \"{{ ipxe_script.stdout_lines[2].split(' ')[1] }}\"\n\n- name: Download kernel.img"
    },
    {
        "predicted_target": "ed except - default security settings forpine123\n  ansible.builtin.template:",
        "source": "---\n- name: Create ssh config file (or add to an exsting file) to if network mode is NAT",
        "target": "  tags: ssh_copy_id, ssh\n  ansible.builtin.blockinfile:\n    path: ~/.ssh/config\n    backup: true\n    create: true\n    mode: \"0644\"\n    block: |\n      Host {{ env.jumphost.name }} \n        HostName {{ env.jumphost.ip }}\n        User {{ env.jumphost.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n      Host {{ env.bastion.networking.ip }}\n        HostName {{ env.bastion.networking.ip }} \n        User {{ env.bastion.access.user }}\n        IdentityFile {{ path_to_key_pair.split('.')[:-1] | join('.') }}\n        ProxyJump {{ env.jumphost.name }} ",
        "verbalized_source": "---\n- name: Create ssh config file (or add to an exsting file) to if network mode is NAT"
    },
    {
        "predicted_target": "for user {{ ubtu1804162230_user }} user\n  ansible.",
        "source": "---\n- name: Add ansible SSH key to ssh-agent",
        "target": "  tags: ssh_agent, ssh\n  lineinfile:\n    line: eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}\n    path: ~/.bash_profile\n  register: ssh_agent_setup\n",
        "verbalized_source": "---\n- name: Add ansible SSH key to ssh-agent"
    },
    {
        "predicted_target": "setup\n  tags: ssh\n  ansible.builtin.debug:\n    var:",
        "source": "---\n- name: Add ansible SSH key to ssh-agent\n  tags: ssh_agent, ssh\n  lineinfile:\n    line: eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}\n    path: ~/.bash_profile\n  register: ssh_agent_setup\n\n- name: Print results from setting up SSH agent",
        "target": "  tags: ssh_agent, ssh\n  debug:\n    var: ssh_agent_setup",
        "verbalized_source": "---\n- name: Add ansible SSH key to ssh-agent\n  tags: ssh_agent, ssh\n  lineinfile:\n    line: eval $(ssh-agent) && ssh-add ~/.ssh/{{ env.ansible_key_name }}\n    path: ~/.bash_profile\n  register: ssh_agent_setup\n\n- name: Print results from setting up SSH agent"
    },
    {
        "predicted_target": "ansible.builtin.include_vars:\n    file: \"{{ template",
        "source": "---\n- name: Load in variables",
        "target": "  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n",
        "verbalized_source": "---\n- name: Load in variables"
    },
    {
        "predicted_target": "ansible.builtin.lineinfile:\n    path: /root/.ssh",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency",
        "target": "  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency"
    },
    {
        "predicted_target": "ansible.builtin.template:\n    src: assert_os_rhel",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script",
        "target": "  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script"
    },
    {
        "predicted_target": "ansible.builtin.copy:\n    src: \"{{ role_path }}",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.",
        "target": "  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost."
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host for running on localhost\n  ansible.builtin.expect:\n  connection:",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host",
        "target": "  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host"
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  expect:\n    async",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.",
        "target": "  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password."
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host.\n  ansible.builtin.debug:\n    var: ssh_copy",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host",
        "target": "  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host"
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh_copy_id, ssh_copy_",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.",
        "target": "  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password."
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host for running on localhost\n  ansible.builtin.expect:\n  connection:",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host",
        "target": "  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host"
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  ansible.builtin.file:\n    path: \"{{ role_path }}",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.",
        "target": "  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller."
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id\n  expect:\n    path: \"{{",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.",
        "target": "  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname != '127.0.0.1'\n",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost."
    },
    {
        "predicted_target": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname!= '127.0.0.1'\n\n- name: Ensure ssh-copy-id files folder exists for future runs.\n  include_file: \"{{ inventory_dir }}/{{ role_path }}/files",
        "source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Ensure ssh-copy-id files folder exists for future runs.",
        "target": "  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/\"\n    state: directory\n  delegate_to: 127.0.0.1",
        "verbalized_source": "---\n- name: Load in variables\n  tags: ssh_copy_id, ssh\n  include_vars: \"{{ inventory_dir }}/group_vars/all.yaml\"\n\n- name: Delete SSH key from known hosts if it already exists for idempotency\n  tags: ssh_copy_id, ssh\n  lineinfile:\n    path: ~/.ssh/known_hosts\n    search_string: \"{{ ssh_target[0] }}\"\n    state: absent\n\n- name: Use template file to create expect script\n  tags: ssh_copy_id, ssh\n  template:\n    src: ssh-copy-id.exp.j2\n    dest: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    force: true\n  delegate_to: 127.0.0.1\n\n- name: Copy expect file to jumphost first, if not running on localhost.\n  tags: ssh_copy_id, ssh\n  copy:\n    src: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    dest: ~/.ssh/ssh-copy-id-expect-pass.exp\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Copy SSH ID from controller to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect {{ role_path }}/files/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname == '127.0.0.1'\n\n- name: Copy SSH ID from jumphost to remote host with pre-provided password.\n  tags: ssh_copy_id, ssh\n  command: expect ~/.ssh/ssh-copy-id-expect-pass.exp\n  register: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Print results of copying ssh id to remote host\n  tags: ssh_copy_id, ssh\n  debug:\n    var: ssh_copy\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Delete templated expect script on controller.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  delegate_to: 127.0.0.1\n\n- name: Delete templated expect script on jumphost.\n  tags: ssh_copy_id, ssh\n  file:\n    path: \"{{ role_path }}/files/ssh-copy-id-expect-pass.exp\"\n    state: absent\n  when: inventory_hostname != '127.0.0.1'\n\n- name: Ensure ssh-copy-id files folder exists for future runs."
    },
    {
        "predicted_target": "ansible.builtin.stat:\n    path: /tmp/{{ rhel",
        "source": "---\n- name: Check to see if local SSH directory exists",
        "target": "  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n",
        "verbalized_source": "---\n- name: Check to see if local SSH directory exists"
    },
    {
        "predicted_target": "tags: ssh_key_gen, ssh\n  local_action:\n    path",
        "source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist",
        "target": "  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n",
        "verbalized_source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist"
    },
    {
        "predicted_target": "and rsa\n  tags: ssh_key_gen\n  openssh_keypair:",
        "source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)",
        "target": "  tags: ssh_key_gen, ssh\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n",
        "verbalized_source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)"
    },
    {
        "predicted_target": "ansible.builtin.debug:\n    var: ssh_key_creation",
        "source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  tags: ssh_key_gen, ssh\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n\n- name: Print results of ssh key pair creation",
        "target": "  tags: ssh_key_gen, ssh\n  debug:\n    var: ssh_key_creation\n",
        "verbalized_source": "---\n- name: Check to see if local SSH directory exists\n  tags: ssh_key_gen, ssh\n  stat:\n    path: ~/.ssh\n  register: ssh_directory_exists_check\n\n- name: Create SSH local directory if it doesn't already exist\n  tags: ssh_key_gen, ssh\n  file:\n    path: ~/.ssh\n    state: directory\n    mode: \"700\"\n  register: ssh_directory_creation\n  when: ssh_directory_exists_check.stat.exists == false\n\n- name: Generate an OpenSSH keypair with the default values (4096 bits, RSA)\n  tags: ssh_key_gen, ssh\n  community.crypto.openssh_keypair:\n    path: ~/.ssh/{{ env.ansible_key_name }}\n    passphrase: \"\"\n    comment: Ansible-OpenShift-Provisioning SSH key\n    regenerate: full_idempotence\n  register: ssh_key_creation\n\n- name: Print results of ssh key pair creation"
    }
]